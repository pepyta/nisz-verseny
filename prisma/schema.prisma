// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  Post                   Post[]
  PasswordAuthentication PasswordAuthentication?
  Message                Message[]
  Reaction               Reaction[]
  Question               Question[]
  Answer                 Answer[]
  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model PasswordAuthentication {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  password String

  userId Int @unique
  @@map(name: "password_authentication")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   Json
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId                Int
  PostCategoryConnector PostCategoryConnector[]
  reactions             Reaction[]
  @@map(name: "posts")
}

model PostCategoryConnector {
  id       Int      @id @default(autoincrement())
  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  postId     Int
  categoryId String
  @@unique([postId, categoryId])
  @@map(name: "post_category_connector")
}

model Category {
  id    String @id
  name  String
  color String

  PostCategoryConnector     PostCategoryConnector[]
  Message                   Message[]
  QuestionCategoryConnector QuestionCategoryConnector[]
  @@map(name: "categories")
}

model Message {
  id       Int      @id @default(autoincrement())
  content  String
  sender   User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  sentat   DateTime @default(now())

  userId     Int
  categoryId String
  @@map(name: "messages")
}

model Reaction {
  id    Int    @id @default(autoincrement())
  emoji String
  post  Post   @relation(fields: [postId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  postId Int
  userId Int
  @@map(name: "reactions")
}

model QuestionCategoryConnector {
  id       Int      @id @default(autoincrement())
  qustion  Question @relation(fields: [questionId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  questionId Int
  categoryId String
  @@map(name: "question_category_connectors")
}

model Question {
  id      Int    @id @default(autoincrement())
  title   String
  content Json
  user    User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  QuestionCategoryConnector QuestionCategoryConnector[]
  userId                    Int
  answers                    Answer[]
  @@map(name: "questions")
}

model Answer {
  id       Int      @id @default(autoincrement())
  content  String
  marked   Boolean  @default(false)
  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
  createdAt DateTime @default(now())

  userId Int
  @@map(name: "answers")
  questionId Int
}
